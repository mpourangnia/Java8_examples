/*
 * Created on 2008-maj-22
 */
package se.skandia.ll.fsk.srv.util.dev;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;
import java.util.prefs.Preferences;

import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ProgressMonitor;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * ToolWindow
 */

@SuppressWarnings("serial")
public class ToolWindow extends JPanel implements ActionListener {

	private static final String newline = "\n";

    Map<Object, FileTask> tasks = new HashMap<>();

    JPanel buttonPanel;

    //JButton openButton; //, saveButton;

    JTextArea log;

    JFileChooser fc;

    private static ByteArrayOutputStream outBuf;

    public static interface FileTask {
        public void run(File f) throws Exception;
        public String getName();
    }

    public static final ToolWindow create() {

        outBuf = new ByteArrayOutputStream();
        System.setErr( new PrintStream(outBuf ));
        System.setOut(  new PrintStream(outBuf ));




        try {
            UIManager.setLookAndFeel(
                    UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException e1) {
            e1.printStackTrace();
        } catch (InstantiationException e1) {
            e1.printStackTrace();
        } catch (IllegalAccessException e1) {
            e1.printStackTrace();
        } catch (UnsupportedLookAndFeelException e1) {
            e1.printStackTrace();
        }

        final ToolWindow[] t = new ToolWindow[1];
        if (!EventQueue.isDispatchThread()) {

        	try {
        		Runnable task = () -> {t[0] = new ToolWindow();};

        		EventQueue.invokeAndWait(task);
        		new Thread(task).start();

        	} catch (Exception e) {
        		e.printStackTrace();
        	}
        }
        return t[0];
    }

    private ToolWindow() {
        super(new BorderLayout());
        //For layout purposes, put the buttons in a separate
        // panel
        buttonPanel = new JPanel();
        buttonPanel.setLayout( new BoxLayout(buttonPanel,BoxLayout.Y_AXIS));


    }

    @Override
	public void actionPerformed(ActionEvent e) {

        try {

        //Handle open button action.
        final FileTask task = tasks.get(e.getSource());
        if (e.getSource() != null) {

            Preferences prefs = Preferences.userNodeForPackage(task.getClass());

            String start = prefs.get("location",".");

            //Create a file chooser
            fc = new JFileChooser(start);

            int returnVal = fc.showOpenDialog(ToolWindow.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                final File file = fc.getSelectedFile();

                prefs.put("location", file.getCanonicalPath());
                //This is where a real application would open the file.
                log.append("Opening: " + file.getName() + "." + newline);
                final ProgressMonitor monitor = new ProgressMonitor(this, "running", task.getName(), 0, 1);
                monitor.setMaximum(1);
                monitor.setProgress(0);

                // We're going to do something that takes a long time, so we
                // spin off a thread and update the display when we're done.
                Runnable worker = () -> {
                	
                	try {
                		task.run(file);
                	} catch (Exception ex) {
                		ex.printStackTrace();
                	}
                	
                	// Report the result using invokeLater()
                	EventQueue.invokeLater( () -> { 
                		monitor.setProgress(1);
                		setEnabled(true);
                		log.append("Done: " + file.getName() + "." + newline);});
                };
                
                new Thread(worker).start();

            } else {
                log.append("Open command cancelled by user." + newline);
            }
            log.setCaretPosition(log.getDocument().getLength());

            //Handle save button action.
        } else if (e.getSource() == null) {
            int returnVal = fc.showSaveDialog(ToolWindow.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                //This is where a real application would save the file.
                log.append("Saving: " + file.getName() + "." + newline);
            } else {
                log.append("Save command cancelled by user." + newline);
            }
            log.setCaretPosition(log.getDocument().getLength());

        }
        }catch( Exception o ) {
            log.append( o.getMessage());
        }
    }

    /** Returns an ImageIcon, or null if the path was invalid. */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = ToolWindow.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    public void addTask(final FileTask task) {
    	final ActionListener l = this;

    	EventQueue.invokeLater(() -> {
    		System.out.println("adding task " + task.getName());
    		JButton button = new JButton(task.getName());
    		button.addActionListener(l);
    		buttonPanel.add(button);
    		tasks.put(button, task);
    	});
    }

    /**
     * Create the GUI and show it. For thread safety, this method should be
     * invoked from the event dispatch thread.
     * @throws InvocationTargetException
     * @throws InterruptedException
     */
    public void createAndShowGUI() throws InterruptedException, InvocationTargetException {
        final ToolWindow tw = this;
        EventQueue.invokeAndWait(() -> {
          
                System.out.println("creating gui");

                //Create the log first, because the action listeners
                //need to refer to it.
                log = new JTextArea(5, 20);
                log.setMargin(new Insets(5, 5, 5, 5));
                log.setEditable(false);
                JScrollPane logScrollPane = new JScrollPane(log);

                System.setErr( new PrintStream( new TextAreaStream( log ),true));
                System.setOut( new PrintStream( new TextAreaStream( log ),true));
                System.out.println("stdout: ok");
                System.err.println("stderr: ok");
                log.append("Done setting up stdout & stderr\n");
                log.append( outBuf.toString());


                //Uncomment one of the following lines to try a different
                //file selection mode. The first allows just directories
                //to be selected (and, at least in the Java look and feel,
                //shown). The second allows both files and directories
                //to be selected. If you leave these lines commented out,
                //then the default mode (FILES_ONLY) will be used.
                //
                //fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                //fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

                //Create the open button. We use the image from the JLF
                //Graphics Repository (but we extracted it from the jar).

                //Create the save button. We use the image from the JLF
                //Graphics Repository (but we extracted it from the jar).
                //saveButton = new JButton("Save a File...",
                // createImageIcon("images/Save16.gif"));
                //saveButton.addActionListener(this);

                //buttonPanel.add(saveButton);

                //Add the buttons and the log to this panel.
                add(buttonPanel, BorderLayout.PAGE_START);
                add(logScrollPane, BorderLayout.CENTER);

                //Turn off metal's use of bold fonts
                UIManager.put("swing.boldMetal", Boolean.FALSE);
                //              Create and set up the window.
                JFrame frame = new JFrame("HASSAN ToolWindow");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                //Add content to the window.
                frame.getContentPane().add(tw);



                //Display the window.
                frame.pack();
                frame.setVisible(true);
        });

    }
}
